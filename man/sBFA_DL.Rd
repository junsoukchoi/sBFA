% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sBFA.R
\name{sBFA_DL}
\alias{sBFA_DL}
\title{Implementation of the data-augmneted Gibbs sampler for the sparse Bayesian factor models with the Dirichlet-Laplace priors}
\usage{
sBFA_DL(
  x,
  q,
  starting,
  priors,
  nmcmc = 10000,
  nburnin = 5000,
  verbose = TRUE,
  nreport = 500
)
}
\arguments{
\item{x}{a matrix containing data}

\item{q}{the number of factors to be fitted.}

\item{starting}{a list with each tag corresponding to a parameter name.
Valid tags are 'Lambda', 'U', 'Sigma', 'Phi', 'tau', 'Psi'.
The value portion of each tag is the parameters' starting values for MCMC.}

\item{priors}{a list with each tag corresponding to a parameter name.
Valid tags are 'Sigma' and 'Phi'.
The value portion of each tag defines the hyperparameters.}

\item{nmcmc}{the number of MCMC iterations.}

\item{nburnin}{the number of burn-in samples.}

\item{verbose}{if TRUE, progress of the sampler is printed to the screen.
Otherwise, nothing is printed to the screen.}

\item{nreport}{the interval to report the MCMC progress.}
}
\value{
a list that contains MCMC samples from the posterior distribution of the sparse Bayesian factor models with the Dirichlet-Laplace priors .
}
\description{
Implementation of the data-augmneted Gibbs sampler for the sparse Bayesian factor models with the Dirichlet-Laplace priors
}
\examples{
set.seed(7)

# set the sample size n, dimension p, and the number of factors q
n = 100
p = 100
q = floor(log(p))

# generate true Lambda
# s = log(p) nonzero elements are drawn uniformly between 1 and 2 per columns
Lambda = matrix(0, p, q)
for (k in 1 : q)
{
   id_nonzero = sample(1 : p, floor(log(p)))
   Lambda[id_nonzero, k] = runif(floor(log(p)), 1, 2)
}

# set true Sigma to be identity
Sigma = diag(1, p)

# generate data from a sparse factor model with the given Lambda and Sigma
Y = matrix(NA, n, p)
U = matrix(NA, n, q)
for (i in 1 : n)
{
   U[i, ] = rnorm(q)
   Y[i, ] = Lambda \%*\% U[i, ] + sqrt(Sigma) \%*\% rnorm(p)
}

# choose the values of hyperparameters
priors = list()
priors$Sigma = c(0.1, 0.1)
priors$Phi   = 0.5

# obtain starting values for MCMC from the prior distribution
starting = list()
starting$Phi    = matrix(1, p, q)
starting$Phi    = starting$Phi / sum(starting$Phi)
starting$tau    = rgamma(1, shape = p * q * priors$Phi, rate = 0.5)
starting$Psi    = matrix(rexp(p * q, rate = 0.5), p, q)
starting$Lambda = matrix(rnorm(p * q, sd = c(sqrt(starting$Psi * starting$tau^2 * starting$Phi^2))), p, q)
starting$U      = matrix(rnorm(n * q), n, q)
starting$Sigma  = diag(1, p)

}
